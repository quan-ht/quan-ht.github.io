<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>登录</title>
    <link href="/posts/bfc03aca/"/>
    <url>/posts/bfc03aca/</url>
    
    <content type="html"><![CDATA[<pre><code class=" mermaid">sequenceDiagram    actor 用户    participant 前台    participant cookie    participant 服务    participant redis    participant mysql    用户 -&gt;&gt; 前台: 访问后台管理页面    activate 前台    前台 -&gt;&gt; cookie: 判断是否已登录    activate cookie    alt 已登录        cookie --&gt;&gt; 前台: true        前台 -&gt;&gt; 用户: 跳转后台管理页面        else 未登录            cookie --&gt;&gt; 前台: false            deactivate cookie            前台 -&gt;&gt; 用户: 跳转登录页面            前台 -&gt;&gt; 服务: 请求验证码            activate 服务            服务 -&gt;&gt; 服务: 生成验证码            服务 -&gt;&gt; redis: 验证码存入redis            activate redis            服务 --&gt;&gt; 前台: 返回验证码            deactivate 服务        end    用户 -&gt;&gt; 前台: 输入账号、密码、验证码    前台 -&gt;&gt; 服务: 调用登录接口    activate 服务    服务 -&gt;&gt; redis: 获取验证码    redis --&gt;&gt; 服务: 返回验证码    deactivate redis    服务 -&gt;&gt; 服务: 校验验证码    alt 验证码错误        服务 --&gt;&gt; 前台: 返回验证码错误        前台 -&gt;&gt; 用户: 提示验证码错误        else 验证码正确            服务 -&gt;&gt; mysql: 获取用户信息            activate mysql            mysql --&gt;&gt; 服务: 返回用户信息            deactivate mysql            服务 -&gt;&gt; 服务: 登录校验            alt 用户信息错误                服务 --&gt;&gt; 前台: 返回用户信息错误                前台 -&gt;&gt; 用户: 提示用户信息错误                else 用户信息正确                    服务 -&gt;&gt; 服务: 登录成功，生成token                    服务 --&gt;&gt; 前台: 返回token                    前台 -&gt;&gt; cookie: 存入cookie                    activate cookie                    deactivate cookie                    前台 -&gt;&gt; 用户: 跳转后台管理页面                    end        end    deactivate 服务    deactivate 前台</code></pre>]]></content>
    
    
    <categories>
      
      <category>润悦</category>
      
    </categories>
    
    
    <tags>
      
      <tag>登录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro实现记住我功能</title>
    <link href="/posts/4e2b99f6/"/>
    <url>/posts/4e2b99f6/</url>
    
    <content type="html"><![CDATA[<h3 id="1-ShiroConfig"><a href="#1-ShiroConfig" class="headerlink" title="1.ShiroConfig"></a>1.ShiroConfig</h3><h4 id="1-1-设置权限"><a href="#1-1-设置权限" class="headerlink" title="1.1.设置权限"></a>1.1.设置权限</h4><blockquote><p>页面想要实现记住我功能需要在将访问权限设置成<code>user</code>，如果设置成<code>authc</code>也是会被拦截的。</p></blockquote><table><thead><tr><th>Filter Name</th><th>功能</th></tr></thead><tbody><tr><td><strong>anno</strong></td><td>不需要授权、登录就可以访问</td></tr><tr><td><strong>authc</strong></td><td>需要登录授权才能访问</td></tr><tr><td>authcBasic</td><td>Basic HTTP身份验证拦截器</td></tr><tr><td>perms</td><td>授权拦截器perm[‘user:create’]</td></tr><tr><td>port</td><td>端口拦截器eg:port[80]</td></tr><tr><td>rest</td><td>rest风格拦截器</td></tr><tr><td>roles</td><td>角色拦截器。eg：role[administrator]</td></tr><tr><td>ssl</td><td>ssl拦截器。通过https协议才能通过</td></tr><tr><td>user</td><td>用户拦截器。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> ShiroFilterFactoryBean <span class="hljs-title function_">shiroFilterFactoryBean</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager securityManager)</span> &#123;<br>    <span class="hljs-type">ShiroFilterFactoryBean</span> <span class="hljs-variable">factoryBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShiroFilterFactoryBean</span>();<br>    factoryBean.setSecurityManager(securityManager);<br><br>    <span class="hljs-comment">// 权限设置</span><br>    Map&lt;String, String&gt; filterMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>    filterMap.put(<span class="hljs-string">&quot;/admin&quot;</span>, <span class="hljs-string">&quot;user&quot;</span>);<br>    filterMap.put(<span class="hljs-string">&quot;/admin/**&quot;</span>, <span class="hljs-string">&quot;user&quot;</span>);<br><br>    factoryBean.setFilterChainDefinitionMap(filterMap);<br>    factoryBean.setLoginUrl(<span class="hljs-string">&quot;/login&quot;</span>);<br>    <span class="hljs-keyword">return</span> factoryBean;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-编写cookie的生成模板"><a href="#2-编写cookie的生成模板" class="headerlink" title="2.编写cookie的生成模板"></a>2.编写cookie的生成模板</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * cookie对象;</span><br><span class="hljs-comment"> * rememberMeCookie()方法是设置Cookie的生成模版，比如cookie的name，cookie的有效时间等等。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> SimpleCookie <span class="hljs-title function_">rememberMeCookie</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//这个参数是cookie的名称，对应前端的checkbox的name = rememberMe</span><br>    <span class="hljs-type">SimpleCookie</span> <span class="hljs-variable">simpleCookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleCookie</span>(<span class="hljs-string">&quot;rememberMe&quot;</span>);<br>    <span class="hljs-comment">//&lt;!-- 记住我cookie生效时间 ,单位秒;--&gt;</span><br>    simpleCookie.setMaxAge(<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>);<br>    <span class="hljs-keyword">return</span> simpleCookie;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-生成cookie加密的密钥"><a href="#3-生成cookie加密的密钥" class="headerlink" title="3.生成cookie加密的密钥"></a>3.生成cookie加密的密钥</h4><blockquote><p>该密钥需要放到cookie管理器中，可以在项目的test中测试生成再复制到cookie管理器。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchAlgorithmException &#123;<br><br>    <span class="hljs-comment">// cookie加密的密钥</span><br>    <span class="hljs-type">KeyGenerator</span> <span class="hljs-variable">keygen</span> <span class="hljs-operator">=</span> KeyGenerator.getInstance(<span class="hljs-string">&quot;AES&quot;</span>);<br>    <span class="hljs-type">SecretKey</span> <span class="hljs-variable">deskey</span> <span class="hljs-operator">=</span> keygen.generateKey();<br>    System.out.println(Base64.encodeToString(deskey.getEncoded()));<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-编写cookie管理对象"><a href="#4-编写cookie管理对象" class="headerlink" title="4.编写cookie管理对象"></a>4.编写cookie管理对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * cookie管理对象;</span><br><span class="hljs-comment"> * rememberMeManager()方法是生成rememberMe管理器，而且要将这个rememberMe管理器设置到securityManager中</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> CookieRememberMeManager <span class="hljs-title function_">rememberMeManager</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">CookieRememberMeManager</span> <span class="hljs-variable">cookieRememberMeManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CookieRememberMeManager</span>();<br>    cookieRememberMeManager.setCookie(rememberMeCookie());<br>    <span class="hljs-comment">//rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度(128 256 512 位)</span><br>    cookieRememberMeManager.setCipherKey(Base64.decode(<span class="hljs-string">&quot;uAo6JbB7pRecRI1/6DpZyw==&quot;</span>));<br>    <span class="hljs-keyword">return</span> cookieRememberMeManager;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-将cookie管理器放入securityManager中"><a href="#5-将cookie管理器放入securityManager中" class="headerlink" title="5.将cookie管理器放入securityManager中"></a>5.将cookie管理器放入securityManager中</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> DefaultWebSecurityManager <span class="hljs-title function_">securityManager</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">DefaultWebSecurityManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultWebSecurityManager</span>();<br>    manager.setRealm(userRealm());<br>    manager.setRememberMeManager(rememberMeManager());<br>    <span class="hljs-keyword">return</span> manager;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-Controller"><a href="#2-Controller" class="headerlink" title="2.Controller"></a>2.Controller</h3><blockquote><p>在参数中加入<code>boolean rememberMe</code>来获取前端页面发送的是否开启记住我功能，然后在生成<code>token</code>时将<code>rememberMe</code>也放进去。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(String username, String password, <span class="hljs-type">boolean</span> rememberMe,</span><br><span class="hljs-params">                    Model model)</span> &#123;<br><br>    <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br>    <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordToken</span>(username, password, rememberMe);<br>    <span class="hljs-keyword">try</span> &#123;<br>        subject.login(token);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;admin/index&quot;</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (AuthenticationException e) &#123;<br>        e.printStackTrace();<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;用户名或密码错误！&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-前端页面"><a href="#3-前端页面" class="headerlink" title="3.前端页面"></a>3.前端页面</h3><blockquote><p>需要在form表单中加入一个单选框，name属性为rememberMe。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rememberMe&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shiro</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
